/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.s2474.classicmodels.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.s2474.classicmodels.Mytable;
import com.s2474.classicmodels.MytableId;
import com.s2474.classicmodels.service.MytableService;

/**
 * Controller object for domain model class Mytable.
 * @see Mytable
 */
@RestController("classicmodels.MytableController")
@Api(value = "MytableController", description = "Exposes APIs to work with Mytable resource.")
@RequestMapping("/classicmodels/Mytable")
public class MytableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MytableController.class);

    @Autowired
    @Qualifier("classicmodels.MytableService")
    private MytableService mytableService;

    @ApiOperation(value = "Creates a new Mytable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Mytable createMytable(@RequestBody Mytable mytable) {
        LOGGER.debug("Create Mytable with information: {}", mytable);
        mytable = mytableService.create(mytable);
        LOGGER.debug("Created Mytable with information: {}", mytable);
        return mytable;
    }

    @ApiOperation(value = "Returns the Mytable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Mytable getMytable(@RequestParam("columnA") Integer columnA, @RequestParam("columnB") Integer columnB) throws EntityNotFoundException {
        MytableId mytableId = new MytableId();
        mytableId.setColumnA(columnA);
        mytableId.setColumnB(columnB);
        LOGGER.debug("Getting Mytable with id: {}", mytableId);
        Mytable mytable = mytableService.getById(mytableId);
        LOGGER.debug("Mytable details with id: {}", mytable);
        return mytable;
    }

    @ApiOperation(value = "Updates the Mytable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Mytable editMytable(@RequestParam("columnA") Integer columnA, @RequestParam("columnB") Integer columnB, @RequestBody Mytable mytable) throws EntityNotFoundException {
        mytable.setColumnA(columnA);
        mytable.setColumnB(columnB);
        LOGGER.debug("Mytable details with id is updated with: {}", mytable);
        return mytableService.update(mytable);
    }

    @ApiOperation(value = "Deletes the Mytable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMytable(@RequestParam("columnA") Integer columnA, @RequestParam("columnB") Integer columnB) throws EntityNotFoundException {
        MytableId mytableId = new MytableId();
        mytableId.setColumnA(columnA);
        mytableId.setColumnB(columnB);
        LOGGER.debug("Deleting Mytable with id: {}", mytableId);
        Mytable mytable = mytableService.delete(mytableId);
        return mytable != null;
    }

    /**
     * @deprecated Use {@link #findMytables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Mytable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Mytable> searchMytablesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Mytables list");
        return mytableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Mytable instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Mytable> findMytables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Mytables list");
        return mytableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMytables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return mytableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Mytable instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countMytables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Mytables");
        return mytableService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MytableService instance
	 */
    protected void setMytableService(MytableService service) {
        this.mytableService = service;
    }
}
