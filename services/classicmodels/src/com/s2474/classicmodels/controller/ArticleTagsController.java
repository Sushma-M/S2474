/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.s2474.classicmodels.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.s2474.classicmodels.ArticleTags;
import com.s2474.classicmodels.ArticleTagsId;
import com.s2474.classicmodels.service.ArticleTagsService;

/**
 * Controller object for domain model class ArticleTags.
 * @see ArticleTags
 */
@RestController("classicmodels.ArticleTagsController")
@Api(value = "ArticleTagsController", description = "Exposes APIs to work with ArticleTags resource.")
@RequestMapping("/classicmodels/ArticleTags")
public class ArticleTagsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ArticleTagsController.class);

    @Autowired
    @Qualifier("classicmodels.ArticleTagsService")
    private ArticleTagsService articleTagsService;

    @ApiOperation(value = "Creates a new ArticleTags instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ArticleTags createArticleTags(@RequestBody ArticleTags articleTags) {
        LOGGER.debug("Create ArticleTags with information: {}", articleTags);
        articleTags = articleTagsService.create(articleTags);
        LOGGER.debug("Created ArticleTags with information: {}", articleTags);
        return articleTags;
    }

    @ApiOperation(value = "Returns the ArticleTags instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ArticleTags getArticleTags(@RequestParam("articleId") Integer articleId, @RequestParam("tagId") Integer tagId) throws EntityNotFoundException {
        ArticleTagsId articletagsId = new ArticleTagsId();
        articletagsId.setArticleId(articleId);
        articletagsId.setTagId(tagId);
        LOGGER.debug("Getting ArticleTags with id: {}", articletagsId);
        ArticleTags articleTags = articleTagsService.getById(articletagsId);
        LOGGER.debug("ArticleTags details with id: {}", articleTags);
        return articleTags;
    }

    @ApiOperation(value = "Updates the ArticleTags instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ArticleTags editArticleTags(@RequestParam("articleId") Integer articleId, @RequestParam("tagId") Integer tagId, @RequestBody ArticleTags articleTags) throws EntityNotFoundException {
        articleTags.setArticleId(articleId);
        articleTags.setTagId(tagId);
        LOGGER.debug("ArticleTags details with id is updated with: {}", articleTags);
        return articleTagsService.update(articleTags);
    }

    @ApiOperation(value = "Deletes the ArticleTags instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteArticleTags(@RequestParam("articleId") Integer articleId, @RequestParam("tagId") Integer tagId) throws EntityNotFoundException {
        ArticleTagsId articletagsId = new ArticleTagsId();
        articletagsId.setArticleId(articleId);
        articletagsId.setTagId(tagId);
        LOGGER.debug("Deleting ArticleTags with id: {}", articletagsId);
        ArticleTags articleTags = articleTagsService.delete(articletagsId);
        return articleTags != null;
    }

    /**
     * @deprecated Use {@link #findArticleTags(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ArticleTags instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ArticleTags> searchArticleTagsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ArticleTags list");
        return articleTagsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of ArticleTags instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ArticleTags> findArticleTags(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ArticleTags list");
        return articleTagsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportArticleTags(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return articleTagsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of ArticleTags instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countArticleTags(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ArticleTags");
        return articleTagsService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ArticleTagsService instance
	 */
    protected void setArticleTagsService(ArticleTagsService service) {
        this.articleTagsService = service;
    }
}
