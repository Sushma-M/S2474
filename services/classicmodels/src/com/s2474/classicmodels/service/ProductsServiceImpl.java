/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.s2474.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.s2474.classicmodels.Orderdetails;
import com.s2474.classicmodels.Products;


/**
 * ServiceImpl object for domain model class Products.
 *
 * @see Products
 */
@Service("classicmodels.ProductsService")
public class ProductsServiceImpl implements ProductsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductsServiceImpl.class);

    @Autowired
	@Qualifier("classicmodels.OrderdetailsService")
	private OrderdetailsService orderdetailsService;

    @Autowired
    @Qualifier("classicmodels.ProductsDao")
    private WMGenericDao<Products, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Products, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
	public Products create(Products products) {
        LOGGER.debug("Creating a new Products with information: {}", products);
        Products productsCreated = this.wmGenericDao.create(products);
        if(productsCreated.getOrderdetailses() != null) {
            for(Orderdetails orderdetailse : productsCreated.getOrderdetailses()) {
                orderdetailse.setProducts(productsCreated);
                LOGGER.debug("Creating a new child Orderdetails with information: {}", orderdetailse);
                orderdetailsService.create(orderdetailse);
            }
        }
        return productsCreated;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Products getById(String productsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Products by id: {}", productsId);
        Products products = this.wmGenericDao.findById(productsId);
        if (products == null){
            LOGGER.debug("No Products found with id: {}", productsId);
            throw new EntityNotFoundException(String.valueOf(productsId));
        }
        return products;
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Products findById(String productsId) {
        LOGGER.debug("Finding Products by id: {}", productsId);
        return this.wmGenericDao.findById(productsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
	@Override
	public Products update(Products products) throws EntityNotFoundException {
        LOGGER.debug("Updating Products with information: {}", products);
        this.wmGenericDao.update(products);

        String productsId = products.getProductCode();

        return this.wmGenericDao.findById(productsId);
    }

    @Transactional(value = "classicmodelsTransactionManager")
	@Override
	public Products delete(String productsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Products with id: {}", productsId);
        Products deleted = this.wmGenericDao.findById(productsId);
        if (deleted == null) {
            LOGGER.debug("No Products found with id: {}", productsId);
            throw new EntityNotFoundException(String.valueOf(productsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Page<Products> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Products");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Products> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Products");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service classicmodels for table Products to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Orderdetails> findAssociatedOrderdetailses(String productCode, Pageable pageable) {
        LOGGER.debug("Fetching all associated orderdetailses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("products.productCode = '" + productCode + "'");

        return orderdetailsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OrderdetailsService instance
	 */
	protected void setOrderdetailsService(OrderdetailsService service) {
        this.orderdetailsService = service;
    }

}

