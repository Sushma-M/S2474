/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.s2474.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.s2474.classicmodels.Mytable2;
import com.s2474.classicmodels.Mytable2Id;


/**
 * ServiceImpl object for domain model class Mytable2.
 *
 * @see Mytable2
 */
@Service("classicmodels.Mytable2Service")
public class Mytable2ServiceImpl implements Mytable2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Mytable2ServiceImpl.class);


    @Autowired
    @Qualifier("classicmodels.Mytable2Dao")
    private WMGenericDao<Mytable2, Mytable2Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Mytable2, Mytable2Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
	public Mytable2 create(Mytable2 mytable2) {
        LOGGER.debug("Creating a new Mytable2 with information: {}", mytable2);
        Mytable2 mytable2Created = this.wmGenericDao.create(mytable2);
        return mytable2Created;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Mytable2 getById(Mytable2Id mytable2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Mytable2 by id: {}", mytable2Id);
        Mytable2 mytable2 = this.wmGenericDao.findById(mytable2Id);
        if (mytable2 == null){
            LOGGER.debug("No Mytable2 found with id: {}", mytable2Id);
            throw new EntityNotFoundException(String.valueOf(mytable2Id));
        }
        return mytable2;
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Mytable2 findById(Mytable2Id mytable2Id) {
        LOGGER.debug("Finding Mytable2 by id: {}", mytable2Id);
        return this.wmGenericDao.findById(mytable2Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
	@Override
	public Mytable2 update(Mytable2 mytable2) throws EntityNotFoundException {
        LOGGER.debug("Updating Mytable2 with information: {}", mytable2);
        this.wmGenericDao.update(mytable2);

        Mytable2Id mytable2Id = new Mytable2Id();
        mytable2Id.setId(mytable2.getId());
        mytable2Id.setCol1(mytable2.getCol1());

        return this.wmGenericDao.findById(mytable2Id);
    }

    @Transactional(value = "classicmodelsTransactionManager")
	@Override
	public Mytable2 delete(Mytable2Id mytable2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Mytable2 with id: {}", mytable2Id);
        Mytable2 deleted = this.wmGenericDao.findById(mytable2Id);
        if (deleted == null) {
            LOGGER.debug("No Mytable2 found with id: {}", mytable2Id);
            throw new EntityNotFoundException(String.valueOf(mytable2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Page<Mytable2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Mytable2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Mytable2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Mytable2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service classicmodels for table Mytable2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

